# -*- coding: utf-8 -*-
# ------------------------------
# GoldTrust Support Bot - FINAL FIXED VERSION
# ------------------------------

import telebot
from telebot import types

TOKEN = "8499056222:AAG2p_tSmvOZIhCILvgeA_wD3khiAF6rebc"  # –≤—Å—Ç–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∏
BOT_USERNAME = "GoldTrustSupport_bot"
SUPPORT_USERNAME = "@GoldTrustSupport"

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

user_state = {}
user_data = {}

# ====== –¢–ï–ö–°–¢–ò ======
TEXTS = {
    "ru": {
        "welcome": "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GoldTrust!</b>\n\n–í–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.",
        "profile": "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\nüîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nüîπ ID: <code>{user_id_str}</code>\nüîπ –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π",

        "create_ticket": "üìù <b>–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:",
        "problem_types": ["üî∏ –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å–¥–µ–ª–∫–æ–π", "üî∏ –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π", "üî∏ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–≤–æ–¥–æ–º", "üî∏ –î—Ä—É–≥–æ–µ"],

        "enter_deal_code": "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–¥–µ–ª–∫–∏:</b>",
        "enter_agent_description": "üìù <b>–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–π —Å–¥–µ–ª–∫–µ/–æ–ø–ª–∞—Ç–µ:</b>",

        "enter_amount": "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:</b>\n\n<i>–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ</i>",
        "currency_choice": "üí± <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:</b>",

        "min_withdraw": (
            "‚ö†Ô∏è <b>–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!</b>\n\n"
            "–í —Å–≤—è–∑–∏ —Å–æ —Å–±–æ–µ–º —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –≤–∞–ª—é—Ç–µ {currency}, "
            "–≤—Ä–µ–º–µ–Ω–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {amount} {currency}.\n\n"
            "–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∫ –≤—ã–≤–æ–¥—É –æ—Ç {amount} {currency}. "
            "–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –≤–∞–ª—é—Ç–µ {currency}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É(-–∏) –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Å—É–º–º—É, "
            "—á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –≤—ã–≤–æ–¥–∞.\n\n"
            "–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
        ),

        "agent_notification": "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!</b>\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–≥–µ–Ω—Ç–∞–º. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        "support_contact": "üìû <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≥–µ–Ω—Ç–æ–º —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\nüë§ {support_username}\n\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º.",

        "enter_custom_problem": "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (–æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ):",
        "verify_data": "üîç <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nüìã –†–∞–∑–¥–µ–ª: –î—Ä—É–≥–æ–µ\nüí¨ –û–±—Ä–∞—â–µ–Ω–∏–µ: {problem}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        "data_correct": "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–≥–µ–Ω—Ç–∞–º.",
        "data_incorrect": "üìù –•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:",

        "language_changed": "üåç <b>–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π</b>",

        "back": "üîô –ù–∞–∑–∞–¥",
        "contact_agent": "üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≥–µ–Ω—Ç–æ–º"
    },

     "en": {
            "welcome": "üëã <b>Welcome to GoldTrust!</b>\n\nYour reliable partner for secure deals.",
            "profile": "üë§ <b>Profile</b>\nüîπ User: @{username}\nüîπ ID: <code>{user_id_str}</code>\nüîπ Language: English",

        "create_ticket": "üìù <b>Create Ticket</b>\n\nSelect problem type:",
        "problem_types": ["üî∏ Deal problem", "üî∏ Payment problem", "üî∏ Withdrawal problem", "üî∏ Other"],

        "enter_deal_code": "üî¢ <b>Enter deal code:</b>",
        "enter_agent_description": "üìù <b>Describe your situation for the deal/payment:</b>",

        "enter_amount": "üí∞ <b>Enter deal amount:</b>\n\n<i>Numbers only</i>",
        "currency_choice": "üí± <b>Select currency:</b>",

        "min_withdraw": (
            "‚ö†Ô∏è <b>Dear users!</b>\n\n"
            "Due to a failure in the automatic withdrawal service in {currency}, "
            "a temporary restriction has been introduced: the minimum withdrawal amount is {amount} {currency}.\n\n"
            "Your balances remain safe and available for withdrawal from {amount} {currency}. "
            "To withdraw funds in {currency}, please complete deal(s) for the missing amount to reach the threshold.\n\n"
            "We are working on a fix. Thank you for understanding!"
        ),

        "agent_notification": "‚úÖ <b>Thank you!</b>\n\nYour ticket has been forwarded to our agents. We will contact you after review.",
        "support_contact": "üìû <b>Contact a support agent:</b>\n\nüë§ {support_username}",

        "enter_custom_problem": "üìù Please write your request (describe the problem or suggestion):",
        "verify_data": "üîç <b>Verify your data:</b>\n\nüë§ User: @{username}\nüìã Section: Other\nüí¨ Request: {problem}\n\nIs everything correct?",
        "data_correct": "‚úÖ Thank you! Your ticket has been forwarded to our agents.",
        "data_incorrect": "üìù Okay, please write your request again:","language_changed": "üåç <b>Language changed to English</b>",

        "back": "üîô Back",
        "contact_agent": "üì® Contact agent"
    },

    "uk": {
        "welcome": "üëã <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ GoldTrust!</b>\n\n–í–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è –±–µ–∑–ø–µ—á–Ω–∏—Ö —É–≥–æ–¥.",
        "profile": "üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å</b>\nüîπ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{username}\nüîπ ID: <code>{user_id_str}</code>\nüîπ –ú–æ–≤–∞: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",

        "create_ticket": "üìù <b>–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º–∏:",
        "problem_types": ["üî∏ –ü—Ä–æ–±–ª–µ–º–∞ –∑ —É–≥–æ–¥–æ—é", "üî∏ –ü—Ä–æ–±–ª–µ–º–∞ –∑ –æ–ø–ª–∞—Ç–æ—é", "üî∏ –ü—Ä–æ–±–ª–µ–º–∞ –∑ –≤–∏–≤–æ–¥–æ–º", "üî∏ –Ü–Ω—à–µ"],

        "enter_deal_code": "üî¢ <b>–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —É–≥–æ–¥–∏:</b>",
        "enter_agent_description": "üìù <b>–û–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é —â–æ–¥–æ –≤–∞—à–æ—ó —É–≥–æ–¥–∏/–æ–ø–ª–∞—Ç–∏:</b>",

        "enter_amount": "üí∞ <b>–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —É–≥–æ–¥–∏:</b>\n\n<i>–õ–∏—à–µ —á–∏—Å–ª–æ</i>",
        "currency_choice": "üí± <b>–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:</b>",

        "min_withdraw": (
            "‚ö†Ô∏è <b>–®–∞–Ω–æ–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ!</b>\n\n"
            "–ß–µ—Ä–µ–∑ –∑–±—ñ–π —Å–µ—Ä–≤—ñ—Å—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É –∫–æ—à—Ç—ñ–≤ —É –≤–∞–ª—é—Ç—ñ {currency}, "
            "—Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ –æ–±–º–µ–∂–µ–Ω–Ω—è: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–ª—è –≤–∏–≤–æ–¥—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å {amount} {currency}.\n\n"
            "–í–∞—à—ñ –±–∞–ª–∞–Ω—Å–∏ –≤ –±–µ–∑–ø–µ—Ü—ñ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–æ –≤–∏–≤–æ–¥—É –≤—ñ–¥ {amount} {currency}. "
            "–©–æ–± –≤–∏–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏ —É –≤–∞–ª—é—Ç—ñ {currency}, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ —É–≥–æ–¥—É(-–∏) –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—é —Å—É–º—É, "
            "—â–æ–± –¥–æ—Å—è–≥—Ç–∏ –ø–æ—Ä–æ–≥—É –≤–∏–≤–æ–¥—É.\n\n"
            "–ú–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —É—Å—É–Ω–µ–Ω–Ω—è–º –ø—Ä–æ–±–ª–µ–º–∏. –î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!"
        ),

        "agent_notification": "‚úÖ <b>–î—è–∫—É—î–º–æ!</b>\n\n–í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–∞–º. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.",
        "support_contact": "üìû <b>–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–≥–µ–Ω—Ç–æ–º —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>\n\nüë§ {support_username}",

        "enter_custom_problem": "üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è (–æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é):",
        "verify_data": "üîç <b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –¥–∞–Ω—ñ:</b>\n\nüë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{username}\nüìã –†–æ–∑–¥—ñ–ª: –Ü–Ω—à–µ\nüí¨ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è: {problem}\n\n–í—Å–µ –≤—ñ—Ä–Ω–æ?",
        "data_correct": "‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–∞–º.",
        "data_incorrect": "üìù –ì–∞—Ä–∞–∑–¥, –Ω–∞–ø–∏—à—ñ—Ç—å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–Ω–æ–≤–æ:",

        "language_changed": "üåç <b>–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É</b>",

        "back": "üîô –ù–∞–∑–∞–¥",
        "contact_agent": "üì® –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–≥–µ–Ω—Ç–æ–º"
    }
}

def get_text(user_id, key, **kwargs):
    lang = user_data.get(user_id, {}).get("language", "ru")
    text = TEXTS[lang].get(key, key)
    return text.format(**kwargs) if kwargs else text


# ====== –ö–û–ú–ê–ù–î–´ ======
@bot.message_handler(commands=["start"])
def cmd_start(message):
    user_id = message.from_user.id
    user_data[user_id] = {"language": "ru"}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üÜò –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", "üìÑ –ü—Ä–æ—Ñ–∏–ª—å")
    markup.add("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")

    bot.send_message(message.chat.id, get_text(user_id, "welcome"), reply_markup=markup)


# ====== –ú–ï–ù–Æ ======
@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü—Ä–æ—Ñ–∏–ª—å")
def menu_profile(message):
    user_id = message.from_user.id
    username = message.from_user.username or "‚Äî"
    bot.send_message(
        message.chat.id,
        get_text(user_id, "profile", username=username, user_id_str=user_id)
    )


@bot.message_handler(func=lambda msg: msg.text == "üÜò –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")
def menu_create_ticket(message):
    user_id = message.from_user.id
    user_state[user_id] = "wait_problem_type"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for problem_type in get_text(user_id, "problem_types"):
        markup.add(problem_type)
    markup.add("üîô –ù–∞–∑–∞–¥")

    bot.send_message(message.chat.id, get_text(user_id, "create_ticket"), reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
def menu_language(message):
    user_id = message.from_user.id

    # –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ –∑–∞–ø–∏—Å –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î
    if user_id not in user_data:
        user_data[user_id] = {"language": "ru"}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∫üá∏ English")
    markup.add("üîô –ù–∞–∑–∞–¥")

    bot.send_message(message.chat.id, "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:</b>", reply_markup=markup)
    user_state[user_id] = "wait_language"
@bot.message_handler(func=lambda msg: user_state.get(msg.from_user.id) == "wait_language")
def handle_language(message):
    user_id = message.from_user.id

    language_map = {
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru",
        "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk",
        "üá∫üá∏ English": "en",
        "üîô –ù–∞–∑–∞–¥": None
    }

    choice = language_map.get(message.text)

    # —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ "–ù–∞–∑–∞–¥" –∞–±–æ —â–æ—Å—å –Ω–µ–≤—ñ–¥–æ–º–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if choice is None:
        user_state.pop(user_id, None)
        bot.send_message(message.chat.id, "‚Ü©Ô∏è", reply_markup=get_main_menu(user_id))
        return

    # –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in user_data:
        user_data[user_id] = {}

    # –∑–º—ñ–Ω—é—î–º–æ –º–æ–≤—É —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
    user_data[user_id]["language"] = choice
    lang_changed = get_text(user_id, "language_changed")
    bot.send_message(message.chat.id, lang_changed, reply_markup=get_main_menu(user_id))

    # —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    user_state.pop(user_id, None)

# ====== –ü–†–û–ë–õ–ï–ú–ò ======
@bot.message_handler(func=lambda msg: user_state.get(msg.from_user.id) == "wait_problem_type")
def handle_problem_type(message):
    user_id = message.from_user.id
    problem_type = message.text

    types_list = get_text(user_id, "problem_types")

    if problem_type == types_list[0] or problem_type == types_list[1]:
        user_data[user_id]["problem_type"] = problem_type
        user_state[user_id] = "wait_deal_code"
        bot.send_message(message.chat.id, get_text(user_id, "enter_deal_code"))

    elif problem_type == types_list[2]:
        user_data[user_id]["problem_type"] = problem_type
        user_state[user_id] = "wait_deal_code_withdraw"
        bot.send_message(message.chat.id, get_text(user_id, "enter_deal_code"))

    elif problem_type == types_list[3]:
        user_data[user_id]["problem_type"] = problem_type
        user_state[user_id] = "wait_custom_problem"
        bot.send_message(message.chat.id, get_text(user_id, "enter_custom_problem"))


# ====== –î–õ–Ø –°–î–ï–õ–ö–ò/–û–ü–õ–ê–¢–´ ======
@bot.message_handler(func=lambda msg: user_state.get(msg.from_user.id) == "wait_deal_code")
def handle_deal(message):
    user_id = message.from_user.id
    user_data[user_id]["deal_code"] = message.text
    user_state[user_id] = "wait_situation"
    bot.send_message(message.chat.id, get_text(user_id, "describe_situation"))


@bot.message_handler(func=lambda msg: user_state.get(msg.from_user.id) == "wait_situation")
def handle_situation(message):
    user_id = message.from_user.id
    user_data[user_id]["situation"] = message.text
    user_state.pop(user_id, None)
    bot.send_message(message.chat.id, get_text(user_id, "agent_notification"), reply_markup=get_main_menu(user_id))


# ====== –ü–†–û–ë–õ–ï–ú–ê –° –í–´–í–û–î–û–ú ======
@bot.message_handler(func=lambda msg: user_state.get(msg.from_user.id) == "wait_deal_code_withdraw")
def handle_withdraw_code(message):
    user_id = message.from_user.id
    user_state[user_id] = "wait_currency"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üá∑üá∫ RUB", "üá∫üá¶ UAH", "üíµ USD", "üíé TON")
    bot.send_message(message.chat.id, get_text(user_id, "currency_choice"), reply_markup=markup)


@bot.message_handler(func=lambda msg: user_state.get(msg.from_user.id) == "wait_currency")
def handle_currency(message):
    user_id = message.from_user.id
    user_data[user_id]["currency"] = message.text.strip()
    user_state[user_id] = "wait_amount"
    bot.send_message(message.chat.id, get_text(user_id, "enter_amount"), reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(func=lambda msg: user_state.get(msg.from_user.id) == "wait_amount")
def handle_amount(message):
    user_id = message.from_user.id
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return

    amount = int(message.text)
    final_amount = int(amount * 1.5)
    currency = user_data[user_id].get("currency", "RUB")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –°–ø–∞—Å–∏–±–æ", "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≥–µ–Ω—Ç–æ–º")

    bot.send_message(
        message.chat.id,
        get_text(user_id, "min_withdraw", amount=final_amount, currency=currency),
        reply_markup=markup
    )
    user_state[user_id] = "wait_response"


# ====== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê ======
@bot.message_handler(func=lambda msg: user_state.get(msg.from_user.id) == "wait_response")
def handle_response(message):
    user_id = message.from_user.id

    if message.text == "‚úÖ –°–ø–∞—Å–∏–±–æ":
        bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!", reply_markup=get_main_menu(user_id))
    elif message.text == "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≥–µ–Ω—Ç–æ–º":
        bot.send_message(
            message.chat.id,
            get_text(user_id, "support_contact", support_username=SUPPORT_USERNAME),
            reply_markup=get_main_menu(user_id),
            disable_web_page_preview=True
        )

    user_state.pop(user_id, None)


# ====== –§–£–ù–ö–¶–ò–ò ======
def get_main_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üÜò –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", "üìÑ –ü—Ä–æ—Ñ–∏–ª—å")
    markup.add("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
    return markup


# ====== –ó–ê–ü–£–°–ö ======
if __name__ == "__main__":
    print("ü§ñ GoldTrust Support Bot - FIXED VERSION")
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
